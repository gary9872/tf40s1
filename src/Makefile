#### DO NOT EDIT THIS FILE.
#### This src/Makefile was automatically generated by unix/tfconfig.  The
#### correct installation precedure is to run ./unixmake in the top directory.
#### You should not edit this file; all configuration changes should
#### be made to the unix/Config file.

#### DO NOT EDIT THIS FILE.
#### This file was automatically generated by unix/tfconfig.
#### Any configuration changes should be made in unix/Config.

TFVERSION  = "TinyFugue version 4.0 stable 1"
X          = 
O          = o
MAKE       = make
TF         = /tmp/tf/usr/bin/tf
SYMLINK    = 
LIBDIR     = /tmp/tf/usr/share/tf-lib
MAILDIR    = /var/spool/mail
MANPAGE    = /tmp/tf/usr/share/man/man6/tf.6
MANTYPE    = nroff
MODE       = 755
CC         = gcc
STRIP      = strip
FLAGS      = -O2 -g -Wall 
LIBS       = -lm -lncurses -lz -lbsd 
OTHER_OBJS = 

# $Id: vars.mak,v 1.23 1999/01/31 00:27:58 hawkeye Exp $
########################################################################
#  TinyFugue - programmable mud client
#  Copyright (C) 1998 - 1999 Ken Keys
#
#  TinyFugue (aka "tf") is protected under the terms of the GNU
#  General Public License.  See the file "COPYING" for details.
#
#  DO NOT EDIT THIS FILE.
#  Any configuration changes should be made to the Config file.
########################################################################

# Makefile variables common to all systems.
# This file should be included or concatenated into a system Makefile.
# Predefined variables:
#   O - object file suffix (e.g., "o" or "obj")

TFVER=40s1-mccp

SOURCE = command.c dstring.c expand.c help.c history.c keyboard.c \
  macro.c main.c malloc.c output.c process.c search.c signals.c \
  socket.c tfio.c tty.c util.c variable.c world.c

OBJS = command.$O dstring.$O expand.$O expr.$O help.$O history.$O keyboard.$O \
  macro.$O main.$O malloc.$O mccp.$O output.$O process.$O search.$O signals.$O \
  socket.$O tfio.$O tty.$O util.$O variable.$O world.$O \
  regexp.$O $(OTHER_OBJS)

# $Id: unix.mak,v 35004.22 1999/01/31 00:28:10 hawkeye Exp $
########################################################################
#  TinyFugue - programmable mud client
#  Copyright (C) 1994 - 1999 Ken Keys
#
#  TinyFugue (aka "tf") is protected under the terms of the GNU
#  General Public License.  See the file "COPYING" for details.
#
#  DO NOT EDIT THIS FILE.
#  Any configuration changes should be made to the Config file.
########################################################################

#
# unix section of src/Makefile.
#

#CFLAGS     = $(FLAGS)
SHELL      = /bin/sh
BUILDERS   = Makefile


install:  _failmsg _all $(TF) LIBRARY $(MANPAGE) $(SYMLINK)
	@echo '#####################################################' > exitmsg
	@echo '## TinyFugue installation successful.' >> exitmsg
	@echo "## You can safely delete everything in `cd ..; pwd`". >> exitmsg
	@DIR=`echo $(TF) | sed 's;/[^/]*$$;;'`; \
	echo ":$(PATH):" | egrep ":$${DIR}:" >/dev/null 2>&1 || { \
	    echo ; \
	} >> exitmsg

all files:  _all
	@echo '#####################################################' > exitmsg
	@echo '## TinyFugue build successful.' >> exitmsg
	@echo '## Use "unixmake install" to install the files.' >> exitmsg

_all:  tf$(X) ../tf-lib/tf-help.idx

_failmsg:
	@echo '#####################################################' > exitmsg
	@echo '#### TinyFugue installation FAILED.' >> exitmsg
	@echo '#### See README for help.' >> exitmsg
	@if [ "$(CC)" = "gcc" ]; then \
	    echo '#### '; \
	    echo '#### Perhaps $(CC) is not configured correctly.'; \
	    echo '#### Before contacting the author, set (and uncomment)'; \
	    echo '#### CC=cc in unix/Config and try again.'; \
	fi >> exitmsg

regexp.o: $(BUILDERS) config.h
	cd ./regexp; \
	    $(MAKE) CC='$(CC)' CFLAGS='$(CFLAGS)' O=o regexp.o >err 2>&1 || \
	    { cat err; rm err; exit 1; }
	rm regexp/err
	mv regexp/regexp.o .

TF tf$(X):     $(OBJS) $(BUILDERS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o tf$(X) $(OBJS) $(LIBS)
#	@# Some stupid linkers return ok status even if they fail.
	@test -f tf$(X)
#	@# ULTRIX's sh errors here if strip isn't found, despite "true".
	-test -z "$(STRIP)" || $(STRIP) tf$(X) || true

install_TF $(TF): tf$(X) $(BUILDERS)
	-@rm -f $(TF)
	cp tf$(X) $(TF)
	chmod $(MODE) $(TF)

SYMLINK $(SYMLINK): $(TF)
	test -z "$(SYMLINK)" || { rm -f $(SYMLINK) && ln -s $(TF) $(SYMLINK); }

LIBRARY $(LIBDIR): ../tf-lib/tf-help ../tf-lib/tf-help.idx
	@echo '## Creating library directory...'
#	@# Overly simplified shell commands, to avoid problems on ultrix
	-@test -n "$(LIBDIR)" || echo "LIBDIR is undefined.  Check unix/Config."
	test -n "$(LIBDIR)"
	test -d "$(LIBDIR)" || mkdir $(LIBDIR)
	-@test -d "$(LIBDIR)" || echo "Can't make $(LIBDIR) directory.  See if"
	-@test -d "$(LIBDIR)" || echo "there is already a file with that name."
	test -d "$(LIBDIR)"
#
#	@#rm -f $(LIBDIR)/*;  # wrong: this would remove local.tf, etc.
	@echo '## Copying library files...'
	cd ../tf-lib; \
	for f in *; do test -f $$f && files="$$files $$f"; done; \
	( cd $(LIBDIR); rm -f $$files tf.help tf.help.index; ); \
	cp $$files $(LIBDIR); \
	cd $(LIBDIR); \
	chmod $(MODE) $$files; chmod ugo-wx $$files
	-rm -f $(LIBDIR)/CHANGES 
	cp ../CHANGES $(LIBDIR)
	chmod $(MODE) $(LIBDIR)/CHANGES; chmod ugo-wx $(LIBDIR)/CHANGES
	chmod $(MODE) $(LIBDIR)
	-@cd $(LIBDIR); old=`ls replace.tf 2>/dev/null`; \
	if [ -n "$$old" ]; then \
	    echo "## WARNING: Obsolete files found in $(LIBDIR): $$old"; \
	fi
	@echo '## Creating links so old library names still work...'
#	@# note: ln -sf isn't portable.
	@cd $(LIBDIR); \
	rm -f bind-bash.tf;    ln -s  kb-bash.tf   bind-bash.tf;    \
	rm -f bind-emacs.tf;   ln -s  kb-emacs.tf  bind-emacs.tf;   \
	rm -f completion.tf;   ln -s  complete.tf  completion.tf;   \
	rm -f factorial.tf;    ln -s  factoral.tf  factorial.tf;    \
	rm -f file-xfer.tf;    ln -s  filexfer.tf  file-xfer.tf;    \
	rm -f local.tf.sample; ln -s  local-eg.tf  local.tf.sample; \
	rm -f pref-shell.tf;   ln -s  psh.tf       pref-shell.tf;   \
	rm -f space_page.tf;   ln -s  spc-page.tf  space_page.tf;   \
	rm -f speedwalk.tf;    ln -s  spedwalk.tf  speedwalk.tf;    \
	rm -f stack_queue.tf;  ln -s  stack-q.tf   stack_queue.tf;  \
	rm -f worldqueue.tf;   ln -s  world-q.tf   worldqueue.tf;

makehelp: makehelp.c
	$(CC) $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) -o makehelp makehelp.c

__always__:

../tf-lib/tf-help: __always__
	if test -d ../help; then cd ../help; $(MAKE) tf-help; fi
	if test -d ../help; then cp ../help/tf-help ../tf-lib; fi

../tf-lib/tf-help.idx: ../tf-lib/tf-help makehelp
	$(MAKE) -f ../unix/unix.mak CC='$(CC)' CFLAGS='$(FLAGS)' makehelp
	./makehelp < ../tf-lib/tf-help > ../tf-lib/tf-help.idx

MANPAGE $(MANPAGE): $(BUILDERS) tf.1.$(MANTYPE)man
	cp tf.1.$(MANTYPE)man $(MANPAGE)
	chmod $(MODE) $(MANPAGE)
	chmod ugo-x $(MANPAGE)

tf.1.catman:  tf.1.nroffman
	TERM=vt100; nroff -man tf.1.nroffman > tf.1.catman

Makefile: ../unix/Config ../unix/vars.mak ../unix/unix.mak ../unix/tfconfig
	@echo
	@echo "## WARNING: changes in Config, etc. will not be reflected."
	@echo

dist: tf.1.catman ../tf-lib/tf-help.idx

uninstall:
	@echo "Remove $(LIBDIR) $(TF) $(MANPAGE)"
	@echo "Is this okay? (y/n)"
	@read response; test "$$response" = "y"
	rm -f $(TF) $(MANPAGE)
	rm -rf $(LIBDIR)

clean distclean cleanest:
	cd ..; ./unixmake $@


# development stuff, not necessarily portable.

tags: *.[ch]
	ctags port.h tf.h *.[ch] 2>/dev/null

dep: *.c
	gcc -E -MM *.c \
		| sed 's;regexp/regexp.h ;;' \
		| sed 's; $$; $$(BUILDERS) ;' \
		> dep

tf.pixie: tf$(X)
	pixie -o tf.pixie tf$(X)

lint:
	lint -woff 128 $(CCFLAGS) -DHAVE_PROTOTYPES $(SOURCE) $(LIBRARIES)

# The next line is a hack to get around a bug in BSD/386 make.
make:

# $Id: rules.mak,v 1.9 1999/01/31 00:27:51 hawkeye Exp $
########################################################################
#  TinyFugue - programmable mud client
#  Copyright (C) 1998 - 1999 Ken Keys
#
#  TinyFugue (aka "tf") is protected under the terms of the GNU
#  General Public License.  See the file "COPYING" for details.
#
#  DO NOT EDIT THIS FILE.
#  Any configuration changes should be made to the Config file.
########################################################################

### rules.mak - Makefile rules common to all systems.
# This file should be portable to all systems, so it can be included in or
# concatenated with all system-specific makefiles.
# Note the regexp.$O rule must be defined in a system-specific file.

# Predefined variables:
#   SYS          - required system type (unix, os2)
#   O            - required object suffix (e.g., "o" or "obj")
#   BUILDERS     - optional list of system-specific dependancies

# tf.h, and everything it #includes
TF_H = tf.h malloc.h globals.h enumlist.h hooklist.h varlist.h

command.$O: command.c config.h port.h dstring.h $(TF_H) util.h tfio.h \
	commands.h command.h world.h socket.h output.h macro.h keyboard.h \
	expand.h search.h signals.h variable.h $(BUILDERS)
dmalloc.$O: dmalloc.c config.h port.h $(TF_H) $(BUILDERS)
dstring.$O: dstring.c config.h port.h malloc.h dstring.h signals.h $(BUILDERS)
expand.$O: expand.c config.h port.h dstring.h $(TF_H) util.h tfio.h macro.h \
	signals.h search.h keyboard.h expand.h commands.h \
	command.h variable.h world.h expr.h parse.h $(BUILDERS)
expr.$O: expr.c config.h port.h dstring.h $(TF_H) util.h tfio.h macro.h \
	signals.h socket.h search.h macro.h output.h keyboard.h expand.h \
	commands.h command.h variable.h world.h tty.h funclist.h expr.h \
	parse.h $(BUILDERS)
help.$O: help.c config.h port.h dstring.h $(TF_H) tfio.h commands.h $(BUILDERS)
history.$O: history.c config.h port.h dstring.h $(TF_H) util.h tfio.h \
	history.h socket.h world.h output.h macro.h commands.h search.h \
	$(BUILDERS)
keyboard.$O: keyboard.c config.h port.h dstring.h $(TF_H) util.h tfio.h \
	macro.h keyboard.h output.h history.h expand.h search.h commands.h \
	tty.h keylist.h $(BUILDERS)
macro.$O: macro.c config.h port.h dstring.h $(TF_H) util.h tfio.h search.h \
	world.h macro.h keyboard.h expand.h socket.h commands.h command.h \
	hooklist.h $(BUILDERS)
main.$O: main.c config.h port.h dstring.h $(TF_H) util.h tfio.h history.h \
	world.h socket.h macro.h output.h signals.h command.h keyboard.h \
	variable.h tty.h $(BUILDERS)
makehelp.$O: makehelp.c config.h port.h $(BUILDERS)
malloc.$O: malloc.c config.h port.h signals.h malloc.h $(BUILDERS)
mccp.$O: mccp.c mccp.h
output.$O: output.c config.h port.h dstring.h $(TF_H) util.h tfio.h socket.h \
	output.h macro.h search.h tty.h variable.h expr.h $(BUILDERS)
process.$O: process.c config.h port.h dstring.h $(TF_H) util.h tfio.h \
	history.h world.h process.h socket.h expand.h commands.h $(BUILDERS)
search.$O: search.c config.h port.h malloc.h search.h $(BUILDERS)
signals.$O: signals.c config.h port.h dstring.h $(TF_H) util.h tfio.h world.h \
	process.h tty.h output.h signals.h variable.h $(BUILDERS)
socket.$O: socket.c config.h port.h dstring.h $(TF_H) util.h tfio.h tfselect.h \
	history.h world.h socket.h output.h process.h macro.h keyboard.h \
	commands.h command.h signals.h search.h mccp.h $(BUILDERS)
tfio.$O: tfio.c config.h port.h dstring.h $(TF_H) util.h tfio.h tfselect.h \
	output.h macro.h history.h search.h signals.h variable.h $(BUILDERS)
tty.$O: tty.c config.h port.h $(TF_H) dstring.h util.h tty.h output.h macro.h \
	search.h variable.h expand.h $(BUILDERS)
util.$O: util.c config.h port.h dstring.h $(TF_H) util.h tfio.h output.h tty.h \
	signals.h variable.h $(BUILDERS)
variable.$O: variable.c config.h port.h dstring.h $(TF_H) util.h tfio.h \
	output.h socket.h search.h commands.h process.h expand.h variable.h \
	enumlist.h varlist.h $(BUILDERS)
world.$O: world.c config.h port.h dstring.h $(TF_H) util.h tfio.h history.h \
	world.h process.h macro.h commands.h socket.h $(BUILDERS)

